imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: easy_admin/ }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: es

framework:
    esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  session.handler.native_file
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
        cookie_lifetime: 31536000
    fragments:       ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    globals:
        recaptcha: "%app.recaptcha.public.dev%"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/../var/data/data.sqlite"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    port:      "%mailer_port%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }


vich_uploader:
    db_driver: orm
    mappings:
        product_pictures:
            uri_prefix: "/uploads"
            upload_destination: "%kernel.root_dir%/../public_html/uploads"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
        category_pictures:
            uri_prefix: "/categories"
            upload_destination: "%kernel.root_dir%/../public_html/categories"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
        category_site_pictures:
            uri_prefix: "/categories/site"
            upload_destination: "%kernel.root_dir%/../public_html/categories/site"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
        category_icon_pictures:
            uri_prefix: "/categories/icon"
            upload_destination: "%kernel.root_dir%/../public_html/categories/icon"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
        blog_images:
            uri_prefix: "%app.path.blog.images%"
            upload_destination: "%kernel.root_dir%/../public_html/uploads/images/blog"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
        site_images:
            uri_prefix: "%app.path.site.images%"
            upload_destination: "%kernel.root_dir%/../public_html/uploads/images/site"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
        offer_images:
            uri_prefix: "%app.path.offer.images%"
            upload_destination: "%kernel.root_dir%/../public_html/uploads/images/offer"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true
        email_images:
            uri_prefix: "%app.path.email.images%"
            upload_destination: "%kernel.root_dir%/../public_html/uploads/images/email"
            namer: vich_uploader.namer_uniqid

            inject_on_load:     false
            delete_on_update:   true
            delete_on_remove:   true

lionware_symfony_session_timeout:
    session:
        expiration_time: 31536000

fos_user:
    db_driver: orm # other valid values are 'mongodb' and 'couchdb'
    firewall_name: main
    user_class: AppBundle\Entity\User
    registration:
        form:
            type: AppBundle\Form\RegistrationType
    profile:
        form:
            type: AppBundle\Form\RegistrationType
    from_email:
        address: "%mailer_user%"
        sender_name: "%mailer_user%"

ivory_ck_editor:
    input_sync: true
    default_config: simple_config
    configs:
        simple_config:
            extraPlugins: "imageuploader,youtube,products"

    plugins:
        imageuploader:
            path: "/bundles/ivoryckeditor/plugins/imageuploader/"
            filename: "plugin.js"
        youtube:
            path: "/bundles/ivoryckeditor/plugins/youtube/"
            filename: "plugin.js"
        products:
            path: "/bundles/ivoryckeditor/plugins/products/"
            filename: "plugin.js"

ewz_recaptcha:
    public_key:  "%app.recaptcha.public.dev%"
    private_key: "%app.recaptcha.private.dev%"
    locale_key:  "%kernel.default_locale%"
    enabled: false

knp_snappy:
    pdf:
        enabled: true
        binary: %kernel.root_dir%/../vendor/h4cc/wkhtmltopdf-win/bin/wkhtmltopdf.exe

# See dos how to configure the bundle: https://symfony.com/doc/current/bundles/LiipImagineBundle/basic-usage.html
liip_imagine:
  # valid drivers options include "gd" or "gmagick" or "imagick"
  driver: "gd"
  resolvers:
    default:
      web_path:
        web_root: "%kernel.root_dir%/../public_html/"
        cache_prefix: /static/cache
  loaders:
    default:
      filesystem:
        data_root: %kernel.root_dir%/../public_html/

  # define your filter sets under this option
  filter_sets:

    # an example thumbnail transformation definition
    # https://symfony.com/doc/current/bundles/LiipImagineBundle/basic-usage.html#create-thumbnails
    extrasmall_thumbnail:

      # set your image quality defaults
      jpeg_quality:          85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:

        # auto rotate the image using EXIF metadata
        auto_rotate: ~

        # strip the image of all metadata
        strip: ~

        # scale and square the image to the given dimensions
        thumbnail:
          size:          [10, 10]
          mode:          outbound

    small_thumbnail:

      # set your image quality defaults
      jpeg_quality:          85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:

        # auto rotate the image using EXIF metadata
        auto_rotate: ~

        # strip the image of all metadata
        strip: ~

        # scale and square the image to the given dimensions
        thumbnail:
          size:          [40, 40]
          mode:          outbound

    squared_thumbnail:

      # set your image quality defaults
      jpeg_quality:          85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:

        # auto rotate the image using EXIF metadata
        auto_rotate: ~

        # strip the image of all metadata
        strip: ~

        # scale and square the image to the given dimensions
        thumbnail:
          size:          [253, 253]
          mode:          outbound
          allow_upscale: true
        #                # create border by placing image on larger black background
        background:
          size:     [256, 256]
          position: center
          color:    '#fff'

    min_width_1920:
      jpeg_quality: 85
      png_compression_level: 8
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [1920, ]

    min_width_1200:
      jpeg_quality: 85
      png_compression_level: 8
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [1200, ]

    min_width_1000:
      # set your image quality defaults
      jpeg_quality:          85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [1000, ]

    min_width_900:

      # set your image quality defaults
      jpeg_quality:          85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [900, ]

    min_width_800:

      # set your image quality defaults
      jpeg_quality: 85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [800, ]

    min_width_600:

      # set your image quality defaults
      jpeg_quality: 85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [600, ]

    min_width_400:
      # set your image quality defaults
      jpeg_quality: 85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [400, ]

    min_width_200:
      # set your image quality defaults
      jpeg_quality:          85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [200, ]

    min_width_100:
      # set your image quality defaults
      jpeg_quality:          85
      png_compression_level: 8

      # setup the filter steps to apply for this transformation
      filters:
        auto_rotate: ~
        strip: ~
        downscale:
          # input 3960x2560px -> output 1980x1280px
          max: [100, ]